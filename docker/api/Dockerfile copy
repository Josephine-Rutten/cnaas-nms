FROM debian:buster

USER root

# Install system packages
RUN apt-get update \
    && apt-get -y upgrade \
    && apt-get install -y --no-install-recommends \
      bind9-host \
      build-essential \
      curl \
      git \
      iputils-ping \
      libpcre2-dev \
      libpcre3-dev \
      libpq-dev \
      libssl-dev \
      net-tools \
      netcat \
      netcat-openbsd \
      nginx \
      procps \
      python3-dev \
      python3-pip \
      python3-setuptools \
      python3-venv \
      python3-wheel \
      python3-yaml \
      psmisc \
      supervisor \
      uwsgi-plugin-python3 \
      ssh-client \
    && pip3 install --no-cache-dir uwsgi

# Prepare for supervisord, ngninx
COPY docker/api/config/supervisord_app.conf /etc/supervisor/supervisord.conf
COPY docker/api/config/nginx_app.conf /etc/nginx/sites-available/
COPY docker/api/config/nginx.conf /etc/nginx/
COPY docker/api/cert/* /etc/nginx/conf.d/
COPY docker/api/config/gitconfig /var/www/.gitconfig
# Prepare running nginx as www-data
RUN unlink /etc/nginx/sites-enabled/default \
    && ln -s /etc/nginx/sites-available/nginx_app.conf /etc/nginx/sites-enabled/default \
    && chown -R www-data:www-data /var/log/nginx/ \
    && chown -R www-data:www-data /var/lib/nginx/ \
    && chown -R root:www-data /etc/nginx/ \
    && chmod -R u=rwX,g=rX,o= /etc/nginx/

# Create cnaas directories
RUN mkdir -p /opt/cnaas /etc/cnaas-nms \
    && chown -R root:www-data /opt/cnaas /etc/cnaas-nms \
    && chmod -R u=rwX,g=rX,o= /opt/cnaas
RUN mkdir -p /opt/cnaas/templates /opt/cnaas/settings /opt/cnaas/venv \
    && chown www-data:www-data /opt/cnaas/templates /opt/cnaas/settings /opt/cnaas/venv /var/www/.gitconfig

# Copy cnaas scripts
COPY --chown=root:www-data cnaas-setup.sh createca.sh exec-pre-app.sh pytest.sh coverage.sh /opt/cnaas/

# Copy cnaas configuration files
COPY --chown=www-data:www-data docker/api/config/api.yml docker/api/config/db_config.yml docker/api/config/plugins.yml docker/api/config/repository.yml /etc/cnaas-nms/


USER www-data

# Give permission for devicecert store
RUN mkdir /tmp/devicecerts \
    && chmod -R u=rwX,g=,o= /tmp/devicecerts

ARG BUILDBRANCH=master
ARG GITREPO_BASE=https://github.com/SUNET/cnaas-nms.git
# Branch specific, don't cache
ADD "https://api.github.com/repos/SUNET/cnaas-nms/git/refs/heads/" latest_commit
# Cnaas setup script
#RUN /opt/cnaas/cnaas-setup.sh ${GITREPO_BASE} ${BUILDBRANCH}
# Start venv
RUN python3 -m venv /opt/cnaas/venv
RUN cd /opt/cnaas/venv/
RUN source bin/activate

RUN /opt/cnaas/venv/bin/pip install --no-cache-dir -U pip

# Fetch the code
# git clone $1 cnaas-nms
COPY . cnaas-nms
RUN cd cnaas-nms/
# switch to $BUILDBRANCH
RUN git config --add remote.origin.fetch "+refs/pull/*/head:refs/remotes/origin/pr/*"
RUN git fetch --all
RUN git checkout $2
# install dependencies
RUN python3 -m pip install --no-cache-dir -r requirements.txt
# Freeze source
USER root
RUN chown -R root:www-data /opt/cnaas/venv/cnaas-nms/ && chmod -R u=rwX,g=rX,o= /opt/cnaas/venv/cnaas-nms/
USER www-data

# Prepare for uwsgi
COPY --chown=root:www-data docker/api/config/uwsgi.ini /opt/cnaas/venv/cnaas-nms/


# Expose HTTPS
EXPOSE 1443

ENTRYPOINT supervisord -c /etc/supervisor/supervisord.conf
